# -*- coding: utf-8 -*-
"""a2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jDUE4riM2PZX-9fVkyKPNQTty_RaO7hI
"""

def is_unique(lst):
    """
     Takes a list of integers as a parameter and returns a Boolean value indicating whether or not the values in the list are unique
     precondition : lst is a list of integers
    """
    unique = True
    current_integers = [] #new empty list
    for number in lst:
        if number not in current_integers:
            current_integers.append(number)
        else:
            unique = False
            break
    return unique

def same_pattern(s1, s2):
  """
  Returns true or false depending on whether two strings have the same pattern of characters
  preconditions: s1 and s2 are strings
  """
  if (len(s1) != len(s2)):
    return False
  for a in range(0, len(s1)):
    for b in range(a + 1, len(s1)):
      if (s1[a] == s1[b] and s2[a] != s2[b]):
        return False
      if (s2[a] == s2[b] and s1[a] != s1[b]):
        return False
    return True

def longest_sorted_sequence(lst):
  """
  Accepts a list of integers as a parameter and returns the length of the longest sorted (nondecreasing) sequence of integers in the list
  precondition : lst is a list of integers
  """
  if len(lst) == 0:
    return 0
  max = 1
  count = 1
  for i in range(1, len(lst)):
      if lst[i] >= lst[i - 1]:
         count += 1
      else:
        count = 1
      if count > max:
        max = count
  return max

def Unique(A, n):
    
    for i in range(n):
        
        unique = True
        
        for j in range(n):
            #check if it isunique
            if(A[i] == A[j] and i != j):
                unique = False
                break
        
        if(unique):
            A[i] = -1
    
    print(A)

print(Unique([5, 4, 7, 5, 9, 6, 6], 7))

"""[texte du lien](https://)n+n+ (n*n)+ (n*(n-k)) + n + n-k"""