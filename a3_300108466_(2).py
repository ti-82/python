# -*- coding: utf-8 -*-
"""a3_300108466_(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qxZIwyJnOuPfzDiEb84xftCKvwR27GoZ

# Course:  ITI1120E
# Assignment Number: 03
 
# Due Date: <font color='red'>Wednesday, March 24, 2021 11:30 PM

## Question #1: <font color='red'>(10 marks)</font>
Write a function called find_max that takes a two dimensional list as a parameter and returns the number of the row that sums to the greatest value. For example if you had the following list of lists:
list = [[1, 2, 3], [2, 3, 3], [1, 3, 3]]
 The first row would be 6, the second 8 and the third 7. The function would therefore return 1. 
You can assume the passed in list of lists has at least one row and one column. You cannot assume that it is square.
"""

##########################
# Question 1 Solution
##########################

def find_max(lis):
  """ 
  Takes a two dimensional list as a parameter and returns the number of rows that sums to the greatest value.
  precondition : lis is a list of integers.
  """
  max_sum = 0
  max_row = 0
  for i in range(0, len(lis)): #iterate through each list in lis
    sum = 0
    row = i
    for j in range(0, len(lis[i])):
      sum += lis[i][j]
    if sum > max_sum: #check if sum is greater than max_sum, if it is, max_sum becomes sum
      max_sum = sum
      max_row = row
  return max_row

### Question 1 Solution ~ test command ###
find_max([[1, 2, 3], [2, 3, 3], [1, 3, 3]])

### Question 1 Solution ~ 2nd test command ###
find_max([[1, 2, 3], [2, 3, 3], [1, 3, 3]])

"""## Question #2: <font color='red'>(10 marks)</font>

Write a static method called encode that takes a string s and an integer n as parameters and that returns a new string that scrambles the order of the characters from s in a particular way.  Taking the characters from s in order, imagine filling a grid of n rows column by column.  When s is "abcdefghijklmnopqrstuvwxyz" and n is 3, you get:

        row 1:       a d g j m p s v y
        row 2:       b e h k n q t w z
        row 3:       c f i l o r u x

The method should return the result of concatenating these characters together with row 1 first, then row 2, and then row 3.  Notice that the final column will not necessarily be complete, as in the example above where the final column has only two characters.  So if you make the call:

        encode("abcdefghijklmnopqrstuvwxyz", 3)

    You should get back the string "adgjmpsvybehknqtwzcfilorux".  The string might contain any characters, including spaces.  For example, the call:

        encode("four score and seven", 4)

    returns "f rneosedvuc eroasn" because the following grid would be produced:

        row 1:       f   r n e
        row 2:       o s e d v
        row 3:       u c     e
        row 4:       r o a s n

   You may assume that the string passed as a parameter is not empty and that the integer passed as a parameter is greater than or equal to 1 and less than the length of the string.  You are not allowed to construct any structured objects other than strings to solve this problem (no list,   list of lists, etc).
Sample Run
encode("abcdefghijklmnopqrstuvwxyz", 3)
> ‘adgjmpsvybehknqtwzcfilorux’
encode("four score and seven", 4)
> ‘f rneosedvuc  eroasn’


"""

##########################
# Question 2 Solution
##########################
def encode(s, n):
  """
  Takes a string s and an integer n as parameters and that returns a new string that scrambles the order of the characters from s in a particular way.
  preconditions :
  s is a string
  n is an integer
  """

  result = ''
  for i in range(0, n): 
    for j in range (0, len(s)-i, n): #iteration with n increment
      result += s[i + j] #re defining result
  return result

### Question 2 Solution ~ 1st test command ###
encode("abcdefghijklmnopqrstuvwxyz", 3)

### Question 2 Solution ~ 2nd test command ###
encode("four score and seven", 4)

"""## Question #3: <font color='red'>(10 marks)</font>

Write a function named **zero_out( )** that perform the following:

1. The function should accepts two lists of integers a1 and a2 as parameters and replaces any occurrences of a2 in a1 with zeroes. 
* The sequence of elements in a2 may appear anywhere in a1 but must appear consecutively and in the same order.
* For example, if variables called a1 and a2 store the following values:
 * a1 = [1, 2, 3, 4, 1, 2, 3, 4, 5].
 * a2 = [2, 3, 4].
 * The call of zero_out(a1, a2) should modify a1's contents to be [1, 0, 0, 0, 1, 0, 0, 0, 5].
* You may assume that both lists passed to your function will have lengths of at least 1. 
* If a2 is not found in a1, or if a1's length is shorter than a2's, then a1 is not modified when calling your function. 
* Do not return new list when a1's contents are being modified in place.
* Do not modify the contents of a2.
* Note that the pattern can occur many times, even consecutively. For  example, the following two lists a1 and a2:
 * a1 = [5, 5, 5, 18, 5, 42, 5, 5, 5, 5], 
 * a2 = [5, 5]. 
 * The call of zero_out(a1, a2) should modify a3's contents to be [0, 0, 5, 18, 5, 42, 0, 0, 0, 0].



"""

##########################
# Question 3 Solution
##########################
def zero_out(a1,a2):
    """ 
    Write a function named zero_out that accepts two lists of integers a1 and a2 as parameters. 
    It replaces any occurrences of a2 in a1 with zeroes. 
    The sequence of elements in a2 may appear anywhere in a1 but must appear consecutively and in the same order.
    precondition : a1 and a2 are two lists of integers.
    """
    count = 0 #to keep track of the initial count
    for i in range(len(a1)):
        if(a1[i] == a2[0]):
            count += 1
            for j in range(1,len(a2)):
                if(a1[i+j] == a2[j]):
                    count += 1 #adjusting count
            if(count == len(a2)):
                for k in range(i,i+len(a2)):
                    a1[k] = 0
        count = 0
    return a1

### Question 3 Solution ~ 1st test command ###
zero_out([1, 2, 3, 4, 1, 2, 3, 4, 5],[2, 3, 4])

### Question 3 Solution ~ 2nd test command ###
zero_out([5, 5, 5, 18, 5, 42, 5, 5, 5, 5], [5, 5])

"""## Question #4: <font color='red'>(10 marks)</font>

Write a function **coin_flip( )** that perform the following:
1. Accepts an input file name as its parameter. 
* Assume that the input file data represents results of sets of coin flips that are either heads (H) or tails (T) in either upper or lower case, without any space. 
* Your function should consider each line to be a separate set of coin flips and should output the number of heads and the percentage of heads in that line, rounded to the nearest tenth. 
* You may assume that input file contains at least 1 line of input, that each line contains at least one token, and that no tokens other than h, H, t, or T will be in the lines.
* If the percentage is more than 50%, you should print a "You win" message. 
* For example, consider the following input file: 
 * HTHHT
 * TttThH	
 * h
* For the above input, your function should produce the following output:
 * 3 heads (60.0%) <br>
   You win!
 * 2 heads (33.3%)
 * 1 heads (100.0%)<br>
   You win!

"""

##########################
# Question 4 Solution
##########################

def coin_flip(flip_results):
    """
    Accepts an input file name as its parameter.
    The input file data represents the results of sets of coin flips that are either heads (H)
    or tails (T) in either upper or lower case, without any space.  
    Should consider each line to be a separate set of coin flips and should output the
    number of heads and the percentage of heads in that line, rounded to the nearest tenth.

    preconditions : flip_results is an input file needed for the program to function.
    
    """
    coin_text = open(flip_results, 'r') #open the file to read the data
    for line in coin_text: 
    	#replace the nextline (\n) with empty character and split them by a space, save the list to coins variable
        coins = (line.replace("\n", "")).split()
        #define total_flip and heads_count variables to zero
        total_flip = 0
        heads_count = 0
        for flip in coins: 
            flip = flip.replace(" ","") 
            if flip != "": 
                if flip.upper() == 'H': 
                    heads_count += 1 
                total_flip += 1 
        percentage = round((heads_count/total_flip) * 100, 1)
        print(f"{heads_count} heads ({percentage}%)")
        if percentage > 50: 
            print("You win!")
        print()

### Question 4 Solution ~ test command ###
coin_flip('flip_results')

"""## Question #5: <font color='red'>(10 marks)</font>

Write a function **run( )** which is a sequence of adjacent repeated values that generates a sequence of 20 random die tosses in a list and that prints the die values, marking the runs by including them in parentheses, like this:<br>
* 1 2 (5 5) 3 1 2 4 3 (2 2 2 2) 3 6 (5 5) 6 3 1<br>
<br>
Hint: you can use the random integer "randint" module in your solution
"""

##########################
# Question 5 Solution
##########################

import random
def run():
    """
    sequence of adjacent repeated values that generates a sequence of
    20 random die tosses in a list and that prints the die values
    preconditions : none
    """
    val = [] #defining initial value
    dice = [1,2,3,4,5,6] #defining what a dice is
    for i in range(20): 
        val.append(random.choice(dice))
    p = False
    result = ""
    for i in range(len(val)-1):
        if(val[i] == val[i+1]):
            if(not p):
                p = True
                result += "("+str(val[i])+" "
            else:
                result += str(val[i])+" "
        else:
            if(p):
                result += str(val[i])+") "
                p = False
            else:
                result += str(val[i])+" "
    if(p):
        result +=str(val[len(val)-1])+")"
    else:
        result += str(val[len(val)-1])
    print(result)

### Question 5 Solution ~ test command ###
run()

"""# Question # 6: <font color='red'>(10 marks)</font>

Write a function called **is_all_odd** that takes a list of lists as a parameter and returns True if all of the integer elements of the lists are odd. <br>
For example, if you test the following list of lists, calling **is_all_odd(lis)** should return True:<br>
lis =[[3, 21, 9], [15, 19, 7, 13], [1, 61, 93]])<br>
Also, If an empty list is passed to your function it should return True as well.

"""

##########################
# Question 6 Solution
##########################
def is_all_odd(lis):
    """
    Takes a list of lists as a parameter and returns True if all of the integer elements of the lists are odd.
    Should also return True if an empty list is provided
    precondition : lis is a list of integers
    """
  for i in lis:
    for j in i:
      if (j%2==0): #verifying the parity
        return False
  return True

### Question 6 Solution ~ 1st test command ###
is_all_odd([[3, 21, 9], [15, 19, 7, 13], [1, 61, 93]])

### Question 6 Solution ~ 2nd test command ###
is_all_odd([])

"""# Question # 7: <font color='red'>(10 marks)</font>

Write a function **range_diff( )** perform the following:
1. Accepts a list of lists as a parameter and returns the range of values contained in the list of lists, which is defined as the difference between the largest and smallest elements + 1. <br>
 * For example, if a variable called **L** stores the following values: <br>
[[18, 14, 29], [12, 7, 25], [2, 22, 5]] <br>
<br>
 * The call of **range_diff(L)** should return 28, because the largest difference between any pair of values+1: (29 - 2 + 1 = 28). <br>
 <br>
* Do not make any assumptions about the range of numbers in  the list of lists. 
* Do not alter the list. 
* Do not create any other data structures.
* An empty list is defined to have a range of 0. 
"""

##########################
# Question 7 Solution
##########################
def range_diff(lis):
    """
    Accepts a list of lists as a parameter and returns the range of values contained in the list of lists
    which is defined as the difference between the largest and smallest elements + 1.
    precondition : lis is a list of lists of integers.
    """
    max = None # Initialize the largest value
    min = None # Initialize the smallest value
    for i in lis:
        for j in i:
            if max is None or j > max: #if j is greater than max, updating max
                max = j
            if min is None or j < min: ##if j is smaller than min, updating min
                min = j
    if max is None:
        return 0
    return max - min + 1 #

### Question 7 Solution ~ 1st test command ###
range_diff([[18, 14, 29], [12, 7, 25], [2, 22, 5]])

"""# Question # 8: <font color='red'>(15 marks)</font>

Write a function called **coupon_collector( )** whcih perform the following:
1. Simulate solution for the coupon collector, which is a classic statistics problem with many practical applications:
* The problem is to pick  objects from a set of objects repeatedly and find out how many picks are needed for all the objects to be picked at least once. 
* A variation of the problem is to pick cards from a shuffled deck of 52 cards repeatedly and find out how many picks are needed before you see one of each suit. 
* Assume a picked card is placed back in the deck before picking another.
* number of picks needed to get four cards, one from each suit and display the four cards picked (it is possible a card may be picked twice)
* Hint: you can use the random integer "randint" module in your solution
"""

import random
def coupon_collector(c):
    """
    Pick cards from a shuffled deck of 52 cards repeatedly and find out how many picks are needed before you see one of each suit.
    preconditions : none
    """
    count=0 #variable to count the number of picks
    hearts,clubs,spades,diamonds = -1,-1,-1,-1
    while(0==0):
        card_drawn=random.randint(0,51)
        if(card_drawn>=0 and card_drawn<=12): #hearts
            hearts=card_drawn
        if(card_drawn>=13 and card_drawn<=25): #clubs
            clubs=card_drawn
        if(card_drawn>=26 and card_drawn<=38): #spades
            spades=card_drawn
        if(card_drawn>=39 and card_drawn<=51): #diamonds
            diamonds=card_drawn
        count+=1
        if(hearts>=0 and clubs>0 and spades>0 and diamonds>0): #checking if all the cards are picked. If yes, it prints them and returns the count.
            print('Card picked from clubs suit is ',c[clubs])
            print('Card picked from spades suit is ',c[spades])
            print('Card picked from diamonds suit is ',c[diamonds])
            return count
c = cards =['A','2','3','4','5','6','7','8','9','10','J','Q','K']*4
count = coupon_collector(c)
print("Total picks is ",count)

"""# Question #9: <font color='red'>(15 marks)</font>

Write a **hangman_game( )** that randomly generates a word and prompts the user to guess one letter at a time, as shown in the sample run. 
1. Each letter in the word is displayed as an asterisk. 
* When the user makes a correct guess, the actual letter is then displayed. 
* When the user finishes a word, display the number of misses and ask the user whether to continue playing. 
* Create a list to store the words, as follows:

words = ["write", "program", "that", "receive", "positive", "change", "study", "excellent", "nice"]

* For example, running the program should show the following output:

![image.png](attachment:image.png)

"""

##########################
# Question 9 Solution
##########################

import random
def hangman_game():
    """
    Function that randomly generates a word and prompts the user to guess one letter at a time.
    preconditions : words is a list of  words
    """
    words = ["write","program","that","receive","positive","change","study","excellent","nice"]
    # loop until user quits
    while True:
        #random word in list
        word = random.choice(words)
        word_len = len(word)
        mask_word = "".join(["*" for i in range(word_len)])
        miss_count = 0
        while "*" in mask_word:
            # asks user for a letter
            letter = input("Enter a letter in word %s > " % mask_word)
            if letter.lower()in mask_word: 
                print("  >> '%s' is already in the word" % letter.lower())
            elif letter.lower() in word:
                for index, i in enumerate(word):
                    if letter.lower() == i:
                        word_list = [i for i in mask_word]
                        word_list[index] = letter.lower()
                        mask_word = "".join(word_list)
            else:
                print("  >> '%s' is not in the word" % letter.lower())
                miss_count += 1
        print("\nThe word is '%s'. You missed %s time.\n" % (word, miss_count))        
        while True:
            choice = input("Do you want to guess another word? Enter y or n: ")
            if choice.lower() == 'y':
                break
            elif choice.lower() == 'n':
                return
if 0==0:
    hangman_game()

